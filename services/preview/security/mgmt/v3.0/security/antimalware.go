package security

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// AntiMalwareClient is the API spec for Microsoft.Security (Azure Security Center) resource provider
type AntiMalwareClient struct {
	BaseClient
}

// NewAntiMalwareClient creates an instance of the AntiMalwareClient client.
func NewAntiMalwareClient(subscriptionID string, ascLocation string) AntiMalwareClient {
	return NewAntiMalwareClientWithBaseURI(DefaultBaseURI, subscriptionID, ascLocation)
}

// NewAntiMalwareClientWithBaseURI creates an instance of the AntiMalwareClient client using a custom endpoint.  Use
// this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewAntiMalwareClientWithBaseURI(baseURI string, subscriptionID string, ascLocation string) AntiMalwareClient {
	return AntiMalwareClient{NewWithBaseURI(baseURI, subscriptionID, ascLocation)}
}

// Create creates or updates the Anti Malware settings on a specified resource.
// Parameters:
// resourceID - the identifier of the resource.
// antiMalwareSetting - anti Malware Settings
func (client AntiMalwareClient) Create(ctx context.Context, resourceID string, antiMalwareSetting AntiMalwareSetting) (result AntiMalwareSetting, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AntiMalwareClient.Create")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreatePreparer(ctx, resourceID, antiMalwareSetting)
	if err != nil {
		err = autorest.NewErrorWithError(err, "security.AntiMalwareClient", "Create", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "security.AntiMalwareClient", "Create", resp, "Failure sending request")
		return
	}

	result, err = client.CreateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "security.AntiMalwareClient", "Create", resp, "Failure responding to request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client AntiMalwareClient) CreatePreparer(ctx context.Context, resourceID string, antiMalwareSetting AntiMalwareSetting) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceId":  resourceID,
		"settingName": autorest.Encode("path", "current"),
	}

	const APIVersion = "2021-08-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	antiMalwareSetting.SystemData = nil
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{resourceId}/providers/Microsoft.Security/antiMalwareSettings/{settingName}", pathParameters),
		autorest.WithJSON(antiMalwareSetting),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client AntiMalwareClient) CreateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client AntiMalwareClient) CreateResponder(resp *http.Response) (result AntiMalwareSetting, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get gets the Anti Malware settings for the specified resource.
// Parameters:
// resourceID - the identifier of the resource.
func (client AntiMalwareClient) Get(ctx context.Context, resourceID string) (result AntiMalwareSetting, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AntiMalwareClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, resourceID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "security.AntiMalwareClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "security.AntiMalwareClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "security.AntiMalwareClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client AntiMalwareClient) GetPreparer(ctx context.Context, resourceID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceId":  resourceID,
		"settingName": autorest.Encode("path", "current"),
	}

	const APIVersion = "2021-08-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{resourceId}/providers/Microsoft.Security/antiMalwareSettings/{settingName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client AntiMalwareClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client AntiMalwareClient) GetResponder(resp *http.Response) (result AntiMalwareSetting, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
