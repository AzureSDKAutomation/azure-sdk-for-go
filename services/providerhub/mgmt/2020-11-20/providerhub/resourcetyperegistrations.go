package providerhub

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// ResourceTypeRegistrationsClient is the microsoft ProviderHub
type ResourceTypeRegistrationsClient struct {
	BaseClient
}

// NewResourceTypeRegistrationsClient creates an instance of the ResourceTypeRegistrationsClient client.
func NewResourceTypeRegistrationsClient(subscriptionID string) ResourceTypeRegistrationsClient {
	return NewResourceTypeRegistrationsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewResourceTypeRegistrationsClientWithBaseURI creates an instance of the ResourceTypeRegistrationsClient client
// using a custom endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign
// clouds, Azure stack).
func NewResourceTypeRegistrationsClientWithBaseURI(baseURI string, subscriptionID string) ResourceTypeRegistrationsClient {
	return ResourceTypeRegistrationsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// CreateOrUpdate creates or updates a resource type.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// properties - the required request body parameters supplied to the resource type registration CreateOrUpdate
// operation.
func (client ResourceTypeRegistrationsClient) CreateOrUpdate(ctx context.Context, providerNamespace string, resourceType string, properties ResourceTypeRegistration) (result ResourceTypeRegistrationsCreateOrUpdateFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ResourceTypeRegistrationsClient.CreateOrUpdate")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.ResourceTypeRegistrationsClient", "CreateOrUpdate", err.Error())
	}

	req, err := client.CreateOrUpdatePreparer(ctx, providerNamespace, resourceType, properties)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "CreateOrUpdate", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOrUpdateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "CreateOrUpdate", nil, "Failure sending request")
		return
	}

	return
}

// CreateOrUpdatePreparer prepares the CreateOrUpdate request.
func (client ResourceTypeRegistrationsClient) CreateOrUpdatePreparer(ctx context.Context, providerNamespace string, resourceType string, properties ResourceTypeRegistration) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"providerNamespace": autorest.Encode("path", providerNamespace),
		"resourceType":      autorest.Encode("path", resourceType),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}", pathParameters),
		autorest.WithJSON(properties),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateSender sends the CreateOrUpdate request. The method will close the
// http.Response Body if it receives an error.
func (client ResourceTypeRegistrationsClient) CreateOrUpdateSender(req *http.Request) (future ResourceTypeRegistrationsCreateOrUpdateFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always
// closes the http.Response Body.
func (client ResourceTypeRegistrationsClient) CreateOrUpdateResponder(resp *http.Response) (result ResourceTypeRegistration, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateOrUpdateNestedResourceTypeFirst creates or updates a resource type.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
// properties - the required request body parameters supplied to the resource type registration CreateOrUpdate
// operation.
func (client ResourceTypeRegistrationsClient) CreateOrUpdateNestedResourceTypeFirst(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, properties ResourceTypeRegistration) (result ResourceTypeRegistrationsCreateOrUpdateNestedResourceTypeFirstFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ResourceTypeRegistrationsClient.CreateOrUpdateNestedResourceTypeFirst")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.ResourceTypeRegistrationsClient", "CreateOrUpdateNestedResourceTypeFirst", err.Error())
	}

	req, err := client.CreateOrUpdateNestedResourceTypeFirstPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, properties)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "CreateOrUpdateNestedResourceTypeFirst", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOrUpdateNestedResourceTypeFirstSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "CreateOrUpdateNestedResourceTypeFirst", nil, "Failure sending request")
		return
	}

	return
}

// CreateOrUpdateNestedResourceTypeFirstPreparer prepares the CreateOrUpdateNestedResourceTypeFirst request.
func (client ResourceTypeRegistrationsClient) CreateOrUpdateNestedResourceTypeFirstPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, properties ResourceTypeRegistration) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst": autorest.Encode("path", nestedResourceTypeFirst),
		"providerNamespace":       autorest.Encode("path", providerNamespace),
		"resourceType":            autorest.Encode("path", resourceType),
		"subscriptionId":          autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}", pathParameters),
		autorest.WithJSON(properties),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateNestedResourceTypeFirstSender sends the CreateOrUpdateNestedResourceTypeFirst request. The method will close the
// http.Response Body if it receives an error.
func (client ResourceTypeRegistrationsClient) CreateOrUpdateNestedResourceTypeFirstSender(req *http.Request) (future ResourceTypeRegistrationsCreateOrUpdateNestedResourceTypeFirstFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateOrUpdateNestedResourceTypeFirstResponder handles the response to the CreateOrUpdateNestedResourceTypeFirst request. The method always
// closes the http.Response Body.
func (client ResourceTypeRegistrationsClient) CreateOrUpdateNestedResourceTypeFirstResponder(resp *http.Response) (result ResourceTypeRegistration, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateOrUpdateNestedResourceTypeSecond creates or updates a resource type.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
// nestedResourceTypeSecond - the second child resource type.
// properties - the required request body parameters supplied to the resource type registration CreateOrUpdate
// operation.
func (client ResourceTypeRegistrationsClient) CreateOrUpdateNestedResourceTypeSecond(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, properties ResourceTypeRegistration) (result ResourceTypeRegistrationsCreateOrUpdateNestedResourceTypeSecondFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ResourceTypeRegistrationsClient.CreateOrUpdateNestedResourceTypeSecond")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.ResourceTypeRegistrationsClient", "CreateOrUpdateNestedResourceTypeSecond", err.Error())
	}

	req, err := client.CreateOrUpdateNestedResourceTypeSecondPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, properties)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "CreateOrUpdateNestedResourceTypeSecond", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOrUpdateNestedResourceTypeSecondSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "CreateOrUpdateNestedResourceTypeSecond", nil, "Failure sending request")
		return
	}

	return
}

// CreateOrUpdateNestedResourceTypeSecondPreparer prepares the CreateOrUpdateNestedResourceTypeSecond request.
func (client ResourceTypeRegistrationsClient) CreateOrUpdateNestedResourceTypeSecondPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, properties ResourceTypeRegistration) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst":  autorest.Encode("path", nestedResourceTypeFirst),
		"nestedResourceTypeSecond": autorest.Encode("path", nestedResourceTypeSecond),
		"providerNamespace":        autorest.Encode("path", providerNamespace),
		"resourceType":             autorest.Encode("path", resourceType),
		"subscriptionId":           autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}", pathParameters),
		autorest.WithJSON(properties),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateNestedResourceTypeSecondSender sends the CreateOrUpdateNestedResourceTypeSecond request. The method will close the
// http.Response Body if it receives an error.
func (client ResourceTypeRegistrationsClient) CreateOrUpdateNestedResourceTypeSecondSender(req *http.Request) (future ResourceTypeRegistrationsCreateOrUpdateNestedResourceTypeSecondFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateOrUpdateNestedResourceTypeSecondResponder handles the response to the CreateOrUpdateNestedResourceTypeSecond request. The method always
// closes the http.Response Body.
func (client ResourceTypeRegistrationsClient) CreateOrUpdateNestedResourceTypeSecondResponder(resp *http.Response) (result ResourceTypeRegistration, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete deletes a resource type
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
func (client ResourceTypeRegistrationsClient) Delete(ctx context.Context, providerNamespace string, resourceType string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ResourceTypeRegistrationsClient.Delete")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.ResourceTypeRegistrationsClient", "Delete", err.Error())
	}

	req, err := client.DeletePreparer(ctx, providerNamespace, resourceType)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "Delete", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "Delete", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "Delete", resp, "Failure responding to request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client ResourceTypeRegistrationsClient) DeletePreparer(ctx context.Context, providerNamespace string, resourceType string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"providerNamespace": autorest.Encode("path", providerNamespace),
		"resourceType":      autorest.Encode("path", resourceType),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client ResourceTypeRegistrationsClient) DeleteSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client ResourceTypeRegistrationsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DeleteNestedResourceTypeFirst deletes a resource type
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
func (client ResourceTypeRegistrationsClient) DeleteNestedResourceTypeFirst(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ResourceTypeRegistrationsClient.DeleteNestedResourceTypeFirst")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.ResourceTypeRegistrationsClient", "DeleteNestedResourceTypeFirst", err.Error())
	}

	req, err := client.DeleteNestedResourceTypeFirstPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "DeleteNestedResourceTypeFirst", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteNestedResourceTypeFirstSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "DeleteNestedResourceTypeFirst", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteNestedResourceTypeFirstResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "DeleteNestedResourceTypeFirst", resp, "Failure responding to request")
		return
	}

	return
}

// DeleteNestedResourceTypeFirstPreparer prepares the DeleteNestedResourceTypeFirst request.
func (client ResourceTypeRegistrationsClient) DeleteNestedResourceTypeFirstPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst": autorest.Encode("path", nestedResourceTypeFirst),
		"providerNamespace":       autorest.Encode("path", providerNamespace),
		"resourceType":            autorest.Encode("path", resourceType),
		"subscriptionId":          autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteNestedResourceTypeFirstSender sends the DeleteNestedResourceTypeFirst request. The method will close the
// http.Response Body if it receives an error.
func (client ResourceTypeRegistrationsClient) DeleteNestedResourceTypeFirstSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteNestedResourceTypeFirstResponder handles the response to the DeleteNestedResourceTypeFirst request. The method always
// closes the http.Response Body.
func (client ResourceTypeRegistrationsClient) DeleteNestedResourceTypeFirstResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DeleteNestedResourceTypeSecond deletes a resource type
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
// nestedResourceTypeSecond - the second child resource type.
func (client ResourceTypeRegistrationsClient) DeleteNestedResourceTypeSecond(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ResourceTypeRegistrationsClient.DeleteNestedResourceTypeSecond")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.ResourceTypeRegistrationsClient", "DeleteNestedResourceTypeSecond", err.Error())
	}

	req, err := client.DeleteNestedResourceTypeSecondPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "DeleteNestedResourceTypeSecond", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteNestedResourceTypeSecondSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "DeleteNestedResourceTypeSecond", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteNestedResourceTypeSecondResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "DeleteNestedResourceTypeSecond", resp, "Failure responding to request")
		return
	}

	return
}

// DeleteNestedResourceTypeSecondPreparer prepares the DeleteNestedResourceTypeSecond request.
func (client ResourceTypeRegistrationsClient) DeleteNestedResourceTypeSecondPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst":  autorest.Encode("path", nestedResourceTypeFirst),
		"nestedResourceTypeSecond": autorest.Encode("path", nestedResourceTypeSecond),
		"providerNamespace":        autorest.Encode("path", providerNamespace),
		"resourceType":             autorest.Encode("path", resourceType),
		"subscriptionId":           autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteNestedResourceTypeSecondSender sends the DeleteNestedResourceTypeSecond request. The method will close the
// http.Response Body if it receives an error.
func (client ResourceTypeRegistrationsClient) DeleteNestedResourceTypeSecondSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteNestedResourceTypeSecondResponder handles the response to the DeleteNestedResourceTypeSecond request. The method always
// closes the http.Response Body.
func (client ResourceTypeRegistrationsClient) DeleteNestedResourceTypeSecondResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get gets a resource type details in the given subscription and provider.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
func (client ResourceTypeRegistrationsClient) Get(ctx context.Context, providerNamespace string, resourceType string) (result ResourceTypeRegistration, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ResourceTypeRegistrationsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.ResourceTypeRegistrationsClient", "Get", err.Error())
	}

	req, err := client.GetPreparer(ctx, providerNamespace, resourceType)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client ResourceTypeRegistrationsClient) GetPreparer(ctx context.Context, providerNamespace string, resourceType string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"providerNamespace": autorest.Encode("path", providerNamespace),
		"resourceType":      autorest.Encode("path", resourceType),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client ResourceTypeRegistrationsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client ResourceTypeRegistrationsClient) GetResponder(resp *http.Response) (result ResourceTypeRegistration, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetNestedResourceTypeFirst gets a resource type details in the given subscription and provider.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
func (client ResourceTypeRegistrationsClient) GetNestedResourceTypeFirst(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string) (result ResourceTypeRegistration, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ResourceTypeRegistrationsClient.GetNestedResourceTypeFirst")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.ResourceTypeRegistrationsClient", "GetNestedResourceTypeFirst", err.Error())
	}

	req, err := client.GetNestedResourceTypeFirstPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "GetNestedResourceTypeFirst", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetNestedResourceTypeFirstSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "GetNestedResourceTypeFirst", resp, "Failure sending request")
		return
	}

	result, err = client.GetNestedResourceTypeFirstResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "GetNestedResourceTypeFirst", resp, "Failure responding to request")
		return
	}

	return
}

// GetNestedResourceTypeFirstPreparer prepares the GetNestedResourceTypeFirst request.
func (client ResourceTypeRegistrationsClient) GetNestedResourceTypeFirstPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst": autorest.Encode("path", nestedResourceTypeFirst),
		"providerNamespace":       autorest.Encode("path", providerNamespace),
		"resourceType":            autorest.Encode("path", resourceType),
		"subscriptionId":          autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetNestedResourceTypeFirstSender sends the GetNestedResourceTypeFirst request. The method will close the
// http.Response Body if it receives an error.
func (client ResourceTypeRegistrationsClient) GetNestedResourceTypeFirstSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetNestedResourceTypeFirstResponder handles the response to the GetNestedResourceTypeFirst request. The method always
// closes the http.Response Body.
func (client ResourceTypeRegistrationsClient) GetNestedResourceTypeFirstResponder(resp *http.Response) (result ResourceTypeRegistration, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetNestedResourceTypeSecond gets a resource type details in the given subscription and provider.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
// resourceType - the resource type.
// nestedResourceTypeFirst - the first child resource type.
// nestedResourceTypeSecond - the second child resource type.
func (client ResourceTypeRegistrationsClient) GetNestedResourceTypeSecond(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string) (result ResourceTypeRegistration, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ResourceTypeRegistrationsClient.GetNestedResourceTypeSecond")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.ResourceTypeRegistrationsClient", "GetNestedResourceTypeSecond", err.Error())
	}

	req, err := client.GetNestedResourceTypeSecondPreparer(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "GetNestedResourceTypeSecond", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetNestedResourceTypeSecondSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "GetNestedResourceTypeSecond", resp, "Failure sending request")
		return
	}

	result, err = client.GetNestedResourceTypeSecondResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "GetNestedResourceTypeSecond", resp, "Failure responding to request")
		return
	}

	return
}

// GetNestedResourceTypeSecondPreparer prepares the GetNestedResourceTypeSecond request.
func (client ResourceTypeRegistrationsClient) GetNestedResourceTypeSecondPreparer(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"nestedResourceTypeFirst":  autorest.Encode("path", nestedResourceTypeFirst),
		"nestedResourceTypeSecond": autorest.Encode("path", nestedResourceTypeSecond),
		"providerNamespace":        autorest.Encode("path", providerNamespace),
		"resourceType":             autorest.Encode("path", resourceType),
		"subscriptionId":           autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetNestedResourceTypeSecondSender sends the GetNestedResourceTypeSecond request. The method will close the
// http.Response Body if it receives an error.
func (client ResourceTypeRegistrationsClient) GetNestedResourceTypeSecondSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetNestedResourceTypeSecondResponder handles the response to the GetNestedResourceTypeSecond request. The method always
// closes the http.Response Body.
func (client ResourceTypeRegistrationsClient) GetNestedResourceTypeSecondResponder(resp *http.Response) (result ResourceTypeRegistration, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByProviderRegistration gets the list of the resource types for the given provider.
// Parameters:
// providerNamespace - the name of the resource provider hosted within ProviderHub.
func (client ResourceTypeRegistrationsClient) ListByProviderRegistration(ctx context.Context, providerNamespace string) (result ResourceTypeRegistrationArrayResponseWithContinuationPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ResourceTypeRegistrationsClient.ListByProviderRegistration")
		defer func() {
			sc := -1
			if result.rtrarwc.Response.Response != nil {
				sc = result.rtrarwc.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: client.SubscriptionID,
			Constraints: []validation.Constraint{{Target: "client.SubscriptionID", Name: validation.MinLength, Rule: 1, Chain: nil}}}}); err != nil {
		return result, validation.NewError("providerhub.ResourceTypeRegistrationsClient", "ListByProviderRegistration", err.Error())
	}

	result.fn = client.listByProviderRegistrationNextResults
	req, err := client.ListByProviderRegistrationPreparer(ctx, providerNamespace)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "ListByProviderRegistration", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByProviderRegistrationSender(req)
	if err != nil {
		result.rtrarwc.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "ListByProviderRegistration", resp, "Failure sending request")
		return
	}

	result.rtrarwc, err = client.ListByProviderRegistrationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "ListByProviderRegistration", resp, "Failure responding to request")
		return
	}
	if result.rtrarwc.hasNextLink() && result.rtrarwc.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByProviderRegistrationPreparer prepares the ListByProviderRegistration request.
func (client ResourceTypeRegistrationsClient) ListByProviderRegistrationPreparer(ctx context.Context, providerNamespace string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"providerNamespace": autorest.Encode("path", providerNamespace),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2020-11-20"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByProviderRegistrationSender sends the ListByProviderRegistration request. The method will close the
// http.Response Body if it receives an error.
func (client ResourceTypeRegistrationsClient) ListByProviderRegistrationSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByProviderRegistrationResponder handles the response to the ListByProviderRegistration request. The method always
// closes the http.Response Body.
func (client ResourceTypeRegistrationsClient) ListByProviderRegistrationResponder(resp *http.Response) (result ResourceTypeRegistrationArrayResponseWithContinuation, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByProviderRegistrationNextResults retrieves the next set of results, if any.
func (client ResourceTypeRegistrationsClient) listByProviderRegistrationNextResults(ctx context.Context, lastResults ResourceTypeRegistrationArrayResponseWithContinuation) (result ResourceTypeRegistrationArrayResponseWithContinuation, err error) {
	req, err := lastResults.resourceTypeRegistrationArrayResponseWithContinuationPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "listByProviderRegistrationNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByProviderRegistrationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "listByProviderRegistrationNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByProviderRegistrationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "providerhub.ResourceTypeRegistrationsClient", "listByProviderRegistrationNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByProviderRegistrationComplete enumerates all values, automatically crossing page boundaries as required.
func (client ResourceTypeRegistrationsClient) ListByProviderRegistrationComplete(ctx context.Context, providerNamespace string) (result ResourceTypeRegistrationArrayResponseWithContinuationIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ResourceTypeRegistrationsClient.ListByProviderRegistration")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByProviderRegistration(ctx, providerNamespace)
	return
}
