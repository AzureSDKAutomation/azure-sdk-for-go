package reservations

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// AppliedScopeType enumerates the values for applied scope type.
type AppliedScopeType string

const (
	// Shared ...
	Shared AppliedScopeType = "Shared"
	// Single ...
	Single AppliedScopeType = "Single"
)

// PossibleAppliedScopeTypeValues returns an array of possible values for the AppliedScopeType const type.
func PossibleAppliedScopeTypeValues() []AppliedScopeType {
	return []AppliedScopeType{Shared, Single}
}

// CalculateExchangeOperationResultStatus enumerates the values for calculate exchange operation result status.
type CalculateExchangeOperationResultStatus string

const (
	// Cancelled ...
	Cancelled CalculateExchangeOperationResultStatus = "Cancelled"
	// Failed ...
	Failed CalculateExchangeOperationResultStatus = "Failed"
	// Pending ...
	Pending CalculateExchangeOperationResultStatus = "Pending"
	// Succeeded ...
	Succeeded CalculateExchangeOperationResultStatus = "Succeeded"
)

// PossibleCalculateExchangeOperationResultStatusValues returns an array of possible values for the CalculateExchangeOperationResultStatus const type.
func PossibleCalculateExchangeOperationResultStatusValues() []CalculateExchangeOperationResultStatus {
	return []CalculateExchangeOperationResultStatus{Cancelled, Failed, Pending, Succeeded}
}

// CreatedByType enumerates the values for created by type.
type CreatedByType string

const (
	// Application ...
	Application CreatedByType = "Application"
	// Key ...
	Key CreatedByType = "Key"
	// ManagedIdentity ...
	ManagedIdentity CreatedByType = "ManagedIdentity"
	// User ...
	User CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns an array of possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{Application, Key, ManagedIdentity, User}
}

// ErrorResponseCode enumerates the values for error response code.
type ErrorResponseCode string

const (
	// ActivateQuoteFailed ...
	ActivateQuoteFailed ErrorResponseCode = "ActivateQuoteFailed"
	// AppliedScopesNotAssociatedWithCommerceAccount ...
	AppliedScopesNotAssociatedWithCommerceAccount ErrorResponseCode = "AppliedScopesNotAssociatedWithCommerceAccount"
	// AuthorizationFailed ...
	AuthorizationFailed ErrorResponseCode = "AuthorizationFailed"
	// BadRequest ...
	BadRequest ErrorResponseCode = "BadRequest"
	// BillingCustomerInputError ...
	BillingCustomerInputError ErrorResponseCode = "BillingCustomerInputError"
	// BillingError ...
	BillingError ErrorResponseCode = "BillingError"
	// BillingPaymentInstrumentHardError ...
	BillingPaymentInstrumentHardError ErrorResponseCode = "BillingPaymentInstrumentHardError"
	// BillingPaymentInstrumentSoftError ...
	BillingPaymentInstrumentSoftError ErrorResponseCode = "BillingPaymentInstrumentSoftError"
	// BillingScopeIDCannotBeChanged ...
	BillingScopeIDCannotBeChanged ErrorResponseCode = "BillingScopeIdCannotBeChanged"
	// BillingTransientError ...
	BillingTransientError ErrorResponseCode = "BillingTransientError"
	// CalculatePriceFailed ...
	CalculatePriceFailed ErrorResponseCode = "CalculatePriceFailed"
	// CapacityUpdateScopesFailed ...
	CapacityUpdateScopesFailed ErrorResponseCode = "CapacityUpdateScopesFailed"
	// ClientCertificateThumbprintNotSet ...
	ClientCertificateThumbprintNotSet ErrorResponseCode = "ClientCertificateThumbprintNotSet"
	// CreateQuoteFailed ...
	CreateQuoteFailed ErrorResponseCode = "CreateQuoteFailed"
	// Forbidden ...
	Forbidden ErrorResponseCode = "Forbidden"
	// FulfillmentConfigurationError ...
	FulfillmentConfigurationError ErrorResponseCode = "FulfillmentConfigurationError"
	// FulfillmentError ...
	FulfillmentError ErrorResponseCode = "FulfillmentError"
	// FulfillmentOutOfStockError ...
	FulfillmentOutOfStockError ErrorResponseCode = "FulfillmentOutOfStockError"
	// FulfillmentTransientError ...
	FulfillmentTransientError ErrorResponseCode = "FulfillmentTransientError"
	// HTTPMethodNotSupported ...
	HTTPMethodNotSupported ErrorResponseCode = "HttpMethodNotSupported"
	// InternalServerError ...
	InternalServerError ErrorResponseCode = "InternalServerError"
	// InvalidAccessToken ...
	InvalidAccessToken ErrorResponseCode = "InvalidAccessToken"
	// InvalidFulfillmentRequestParameters ...
	InvalidFulfillmentRequestParameters ErrorResponseCode = "InvalidFulfillmentRequestParameters"
	// InvalidHealthCheckType ...
	InvalidHealthCheckType ErrorResponseCode = "InvalidHealthCheckType"
	// InvalidLocationID ...
	InvalidLocationID ErrorResponseCode = "InvalidLocationId"
	// InvalidRefundQuantity ...
	InvalidRefundQuantity ErrorResponseCode = "InvalidRefundQuantity"
	// InvalidRequestContent ...
	InvalidRequestContent ErrorResponseCode = "InvalidRequestContent"
	// InvalidRequestURI ...
	InvalidRequestURI ErrorResponseCode = "InvalidRequestUri"
	// InvalidReservationID ...
	InvalidReservationID ErrorResponseCode = "InvalidReservationId"
	// InvalidReservationOrderID ...
	InvalidReservationOrderID ErrorResponseCode = "InvalidReservationOrderId"
	// InvalidSingleAppliedScopesCount ...
	InvalidSingleAppliedScopesCount ErrorResponseCode = "InvalidSingleAppliedScopesCount"
	// InvalidSubscriptionID ...
	InvalidSubscriptionID ErrorResponseCode = "InvalidSubscriptionId"
	// InvalidTenantID ...
	InvalidTenantID ErrorResponseCode = "InvalidTenantId"
	// MissingAppliedScopesForSingle ...
	MissingAppliedScopesForSingle ErrorResponseCode = "MissingAppliedScopesForSingle"
	// MissingTenantID ...
	MissingTenantID ErrorResponseCode = "MissingTenantId"
	// NonsupportedAccountID ...
	NonsupportedAccountID ErrorResponseCode = "NonsupportedAccountId"
	// NotSpecified ...
	NotSpecified ErrorResponseCode = "NotSpecified"
	// NotSupportedCountry ...
	NotSupportedCountry ErrorResponseCode = "NotSupportedCountry"
	// NoValidReservationsToReRate ...
	NoValidReservationsToReRate ErrorResponseCode = "NoValidReservationsToReRate"
	// OperationCannotBePerformedInCurrentState ...
	OperationCannotBePerformedInCurrentState ErrorResponseCode = "OperationCannotBePerformedInCurrentState"
	// OperationFailed ...
	OperationFailed ErrorResponseCode = "OperationFailed"
	// PatchValuesSameAsExisting ...
	PatchValuesSameAsExisting ErrorResponseCode = "PatchValuesSameAsExisting"
	// PaymentInstrumentNotFound ...
	PaymentInstrumentNotFound ErrorResponseCode = "PaymentInstrumentNotFound"
	// PurchaseError ...
	PurchaseError ErrorResponseCode = "PurchaseError"
	// ReRateOnlyAllowedForEA ...
	ReRateOnlyAllowedForEA ErrorResponseCode = "ReRateOnlyAllowedForEA"
	// ReservationIDNotInReservationOrder ...
	ReservationIDNotInReservationOrder ErrorResponseCode = "ReservationIdNotInReservationOrder"
	// ReservationOrderCreationFailed ...
	ReservationOrderCreationFailed ErrorResponseCode = "ReservationOrderCreationFailed"
	// ReservationOrderIDAlreadyExists ...
	ReservationOrderIDAlreadyExists ErrorResponseCode = "ReservationOrderIdAlreadyExists"
	// ReservationOrderNotEnabled ...
	ReservationOrderNotEnabled ErrorResponseCode = "ReservationOrderNotEnabled"
	// ReservationOrderNotFound ...
	ReservationOrderNotFound ErrorResponseCode = "ReservationOrderNotFound"
	// RiskCheckFailed ...
	RiskCheckFailed ErrorResponseCode = "RiskCheckFailed"
	// RoleAssignmentCreationFailed ...
	RoleAssignmentCreationFailed ErrorResponseCode = "RoleAssignmentCreationFailed"
	// ServerTimeout ...
	ServerTimeout ErrorResponseCode = "ServerTimeout"
	// UnauthenticatedRequestsThrottled ...
	UnauthenticatedRequestsThrottled ErrorResponseCode = "UnauthenticatedRequestsThrottled"
	// UnsupportedReservationTerm ...
	UnsupportedReservationTerm ErrorResponseCode = "UnsupportedReservationTerm"
)

// PossibleErrorResponseCodeValues returns an array of possible values for the ErrorResponseCode const type.
func PossibleErrorResponseCodeValues() []ErrorResponseCode {
	return []ErrorResponseCode{ActivateQuoteFailed, AppliedScopesNotAssociatedWithCommerceAccount, AuthorizationFailed, BadRequest, BillingCustomerInputError, BillingError, BillingPaymentInstrumentHardError, BillingPaymentInstrumentSoftError, BillingScopeIDCannotBeChanged, BillingTransientError, CalculatePriceFailed, CapacityUpdateScopesFailed, ClientCertificateThumbprintNotSet, CreateQuoteFailed, Forbidden, FulfillmentConfigurationError, FulfillmentError, FulfillmentOutOfStockError, FulfillmentTransientError, HTTPMethodNotSupported, InternalServerError, InvalidAccessToken, InvalidFulfillmentRequestParameters, InvalidHealthCheckType, InvalidLocationID, InvalidRefundQuantity, InvalidRequestContent, InvalidRequestURI, InvalidReservationID, InvalidReservationOrderID, InvalidSingleAppliedScopesCount, InvalidSubscriptionID, InvalidTenantID, MissingAppliedScopesForSingle, MissingTenantID, NonsupportedAccountID, NotSpecified, NotSupportedCountry, NoValidReservationsToReRate, OperationCannotBePerformedInCurrentState, OperationFailed, PatchValuesSameAsExisting, PaymentInstrumentNotFound, PurchaseError, ReRateOnlyAllowedForEA, ReservationIDNotInReservationOrder, ReservationOrderCreationFailed, ReservationOrderIDAlreadyExists, ReservationOrderNotEnabled, ReservationOrderNotFound, RiskCheckFailed, RoleAssignmentCreationFailed, ServerTimeout, UnauthenticatedRequestsThrottled, UnsupportedReservationTerm}
}

// ExchangeOperationResultStatus enumerates the values for exchange operation result status.
type ExchangeOperationResultStatus string

const (
	// ExchangeOperationResultStatusCancelled ...
	ExchangeOperationResultStatusCancelled ExchangeOperationResultStatus = "Cancelled"
	// ExchangeOperationResultStatusFailed ...
	ExchangeOperationResultStatusFailed ExchangeOperationResultStatus = "Failed"
	// ExchangeOperationResultStatusPendingPurchases ...
	ExchangeOperationResultStatusPendingPurchases ExchangeOperationResultStatus = "PendingPurchases"
	// ExchangeOperationResultStatusPendingRefunds ...
	ExchangeOperationResultStatusPendingRefunds ExchangeOperationResultStatus = "PendingRefunds"
	// ExchangeOperationResultStatusSucceeded ...
	ExchangeOperationResultStatusSucceeded ExchangeOperationResultStatus = "Succeeded"
)

// PossibleExchangeOperationResultStatusValues returns an array of possible values for the ExchangeOperationResultStatus const type.
func PossibleExchangeOperationResultStatusValues() []ExchangeOperationResultStatus {
	return []ExchangeOperationResultStatus{ExchangeOperationResultStatusCancelled, ExchangeOperationResultStatusFailed, ExchangeOperationResultStatusPendingPurchases, ExchangeOperationResultStatusPendingRefunds, ExchangeOperationResultStatusSucceeded}
}

// InstanceFlexibility enumerates the values for instance flexibility.
type InstanceFlexibility string

const (
	// Off ...
	Off InstanceFlexibility = "Off"
	// On ...
	On InstanceFlexibility = "On"
)

// PossibleInstanceFlexibilityValues returns an array of possible values for the InstanceFlexibility const type.
func PossibleInstanceFlexibilityValues() []InstanceFlexibility {
	return []InstanceFlexibility{Off, On}
}

// OperationStatus enumerates the values for operation status.
type OperationStatus string

const (
	// OperationStatusCancelled ...
	OperationStatusCancelled OperationStatus = "Cancelled"
	// OperationStatusFailed ...
	OperationStatusFailed OperationStatus = "Failed"
	// OperationStatusPending ...
	OperationStatusPending OperationStatus = "Pending"
	// OperationStatusSucceeded ...
	OperationStatusSucceeded OperationStatus = "Succeeded"
)

// PossibleOperationStatusValues returns an array of possible values for the OperationStatus const type.
func PossibleOperationStatusValues() []OperationStatus {
	return []OperationStatus{OperationStatusCancelled, OperationStatusFailed, OperationStatusPending, OperationStatusSucceeded}
}

// PaymentStatus enumerates the values for payment status.
type PaymentStatus string

const (
	// PaymentStatusCancelled ...
	PaymentStatusCancelled PaymentStatus = "Cancelled"
	// PaymentStatusFailed ...
	PaymentStatusFailed PaymentStatus = "Failed"
	// PaymentStatusScheduled ...
	PaymentStatusScheduled PaymentStatus = "Scheduled"
	// PaymentStatusSucceeded ...
	PaymentStatusSucceeded PaymentStatus = "Succeeded"
)

// PossiblePaymentStatusValues returns an array of possible values for the PaymentStatus const type.
func PossiblePaymentStatusValues() []PaymentStatus {
	return []PaymentStatus{PaymentStatusCancelled, PaymentStatusFailed, PaymentStatusScheduled, PaymentStatusSucceeded}
}

// ProvisioningState enumerates the values for provisioning state.
type ProvisioningState string

const (
	// ProvisioningStateAuthorizing ...
	ProvisioningStateAuthorizing ProvisioningState = "Authorizing"
	// ProvisioningStateBillingFailed ...
	ProvisioningStateBillingFailed ProvisioningState = "BillingFailed"
	// ProvisioningStateCancelled ...
	ProvisioningStateCancelled ProvisioningState = "Cancelled"
	// ProvisioningStateConfirmedBilling ...
	ProvisioningStateConfirmedBilling ProvisioningState = "ConfirmedBilling"
	// ProvisioningStateConfirmedCapacity ...
	ProvisioningStateConfirmedCapacity ProvisioningState = "ConfirmedCapacity"
	// ProvisioningStateCreated ...
	ProvisioningStateCreated ProvisioningState = "Created"
	// ProvisioningStateCreating ...
	ProvisioningStateCreating ProvisioningState = "Creating"
	// ProvisioningStateExchanged ...
	ProvisioningStateExchanged ProvisioningState = "Exchanged"
	// ProvisioningStateExpired ...
	ProvisioningStateExpired ProvisioningState = "Expired"
	// ProvisioningStateFailed ...
	ProvisioningStateFailed ProvisioningState = "Failed"
	// ProvisioningStateHoldCapacity ...
	ProvisioningStateHoldCapacity ProvisioningState = "HoldCapacity"
	// ProvisioningStateMerged ...
	ProvisioningStateMerged ProvisioningState = "Merged"
	// ProvisioningStatePending ...
	ProvisioningStatePending ProvisioningState = "Pending"
	// ProvisioningStatePendingBilling ...
	ProvisioningStatePendingBilling ProvisioningState = "PendingBilling"
	// ProvisioningStatePendingCapacity ...
	ProvisioningStatePendingCapacity ProvisioningState = "PendingCapacity"
	// ProvisioningStatePendingRefundCollection ...
	ProvisioningStatePendingRefundCollection ProvisioningState = "PendingRefundCollection"
	// ProvisioningStatePendingRefunds ...
	ProvisioningStatePendingRefunds ProvisioningState = "PendingRefunds"
	// ProvisioningStatePendingReview ...
	ProvisioningStatePendingReview ProvisioningState = "PendingReview"
	// ProvisioningStatePreFulfillCancelled ...
	ProvisioningStatePreFulfillCancelled ProvisioningState = "PreFulfillCancelled"
	// ProvisioningStatePreFulfillFailed ...
	ProvisioningStatePreFulfillFailed ProvisioningState = "PreFulfillFailed"
	// ProvisioningStateSucceeded ...
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
	// ProvisioningStateSwapped ...
	ProvisioningStateSwapped ProvisioningState = "Swapped"
	// ProvisioningStateValidating ...
	ProvisioningStateValidating ProvisioningState = "Validating"
)

// PossibleProvisioningStateValues returns an array of possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{ProvisioningStateAuthorizing, ProvisioningStateBillingFailed, ProvisioningStateCancelled, ProvisioningStateConfirmedBilling, ProvisioningStateConfirmedCapacity, ProvisioningStateCreated, ProvisioningStateCreating, ProvisioningStateExchanged, ProvisioningStateExpired, ProvisioningStateFailed, ProvisioningStateHoldCapacity, ProvisioningStateMerged, ProvisioningStatePending, ProvisioningStatePendingBilling, ProvisioningStatePendingCapacity, ProvisioningStatePendingRefundCollection, ProvisioningStatePendingRefunds, ProvisioningStatePendingReview, ProvisioningStatePreFulfillCancelled, ProvisioningStatePreFulfillFailed, ProvisioningStateSucceeded, ProvisioningStateSwapped, ProvisioningStateValidating}
}

// ProvisioningState1 enumerates the values for provisioning state 1.
type ProvisioningState1 string

const (
	// ProvisioningState1Authorizing ...
	ProvisioningState1Authorizing ProvisioningState1 = "Authorizing"
	// ProvisioningState1BillingFailed ...
	ProvisioningState1BillingFailed ProvisioningState1 = "BillingFailed"
	// ProvisioningState1Cancelled ...
	ProvisioningState1Cancelled ProvisioningState1 = "Cancelled"
	// ProvisioningState1ConfirmedBilling ...
	ProvisioningState1ConfirmedBilling ProvisioningState1 = "ConfirmedBilling"
	// ProvisioningState1ConfirmedCapacity ...
	ProvisioningState1ConfirmedCapacity ProvisioningState1 = "ConfirmedCapacity"
	// ProvisioningState1Created ...
	ProvisioningState1Created ProvisioningState1 = "Created"
	// ProvisioningState1Creating ...
	ProvisioningState1Creating ProvisioningState1 = "Creating"
	// ProvisioningState1Exchanged ...
	ProvisioningState1Exchanged ProvisioningState1 = "Exchanged"
	// ProvisioningState1Expired ...
	ProvisioningState1Expired ProvisioningState1 = "Expired"
	// ProvisioningState1Failed ...
	ProvisioningState1Failed ProvisioningState1 = "Failed"
	// ProvisioningState1HoldCapacity ...
	ProvisioningState1HoldCapacity ProvisioningState1 = "HoldCapacity"
	// ProvisioningState1Merged ...
	ProvisioningState1Merged ProvisioningState1 = "Merged"
	// ProvisioningState1Pending ...
	ProvisioningState1Pending ProvisioningState1 = "Pending"
	// ProvisioningState1PendingBilling ...
	ProvisioningState1PendingBilling ProvisioningState1 = "PendingBilling"
	// ProvisioningState1PendingCapacity ...
	ProvisioningState1PendingCapacity ProvisioningState1 = "PendingCapacity"
	// ProvisioningState1PendingRefundCollection ...
	ProvisioningState1PendingRefundCollection ProvisioningState1 = "PendingRefundCollection"
	// ProvisioningState1PendingRefunds ...
	ProvisioningState1PendingRefunds ProvisioningState1 = "PendingRefunds"
	// ProvisioningState1PendingReview ...
	ProvisioningState1PendingReview ProvisioningState1 = "PendingReview"
	// ProvisioningState1PreFulfillCancelled ...
	ProvisioningState1PreFulfillCancelled ProvisioningState1 = "PreFulfillCancelled"
	// ProvisioningState1PreFulfillFailed ...
	ProvisioningState1PreFulfillFailed ProvisioningState1 = "PreFulfillFailed"
	// ProvisioningState1Succeeded ...
	ProvisioningState1Succeeded ProvisioningState1 = "Succeeded"
	// ProvisioningState1Swapped ...
	ProvisioningState1Swapped ProvisioningState1 = "Swapped"
	// ProvisioningState1Validating ...
	ProvisioningState1Validating ProvisioningState1 = "Validating"
)

// PossibleProvisioningState1Values returns an array of possible values for the ProvisioningState1 const type.
func PossibleProvisioningState1Values() []ProvisioningState1 {
	return []ProvisioningState1{ProvisioningState1Authorizing, ProvisioningState1BillingFailed, ProvisioningState1Cancelled, ProvisioningState1ConfirmedBilling, ProvisioningState1ConfirmedCapacity, ProvisioningState1Created, ProvisioningState1Creating, ProvisioningState1Exchanged, ProvisioningState1Expired, ProvisioningState1Failed, ProvisioningState1HoldCapacity, ProvisioningState1Merged, ProvisioningState1Pending, ProvisioningState1PendingBilling, ProvisioningState1PendingCapacity, ProvisioningState1PendingRefundCollection, ProvisioningState1PendingRefunds, ProvisioningState1PendingReview, ProvisioningState1PreFulfillCancelled, ProvisioningState1PreFulfillFailed, ProvisioningState1Succeeded, ProvisioningState1Swapped, ProvisioningState1Validating}
}

// ReservationBillingPlan enumerates the values for reservation billing plan.
type ReservationBillingPlan string

const (
	// Monthly ...
	Monthly ReservationBillingPlan = "Monthly"
	// Upfront ...
	Upfront ReservationBillingPlan = "Upfront"
)

// PossibleReservationBillingPlanValues returns an array of possible values for the ReservationBillingPlan const type.
func PossibleReservationBillingPlanValues() []ReservationBillingPlan {
	return []ReservationBillingPlan{Monthly, Upfront}
}

// ReservationTerm enumerates the values for reservation term.
type ReservationTerm string

const (
	// P1Y ...
	P1Y ReservationTerm = "P1Y"
	// P3Y ...
	P3Y ReservationTerm = "P3Y"
	// P5Y ...
	P5Y ReservationTerm = "P5Y"
)

// PossibleReservationTermValues returns an array of possible values for the ReservationTerm const type.
func PossibleReservationTermValues() []ReservationTerm {
	return []ReservationTerm{P1Y, P3Y, P5Y}
}

// ReservedResourceType enumerates the values for reserved resource type.
type ReservedResourceType string

const (
	// AppService ...
	AppService ReservedResourceType = "AppService"
	// AVS ...
	AVS ReservedResourceType = "AVS"
	// AzureDataExplorer ...
	AzureDataExplorer ReservedResourceType = "AzureDataExplorer"
	// AzureFiles ...
	AzureFiles ReservedResourceType = "AzureFiles"
	// BlockBlob ...
	BlockBlob ReservedResourceType = "BlockBlob"
	// CosmosDb ...
	CosmosDb ReservedResourceType = "CosmosDb"
	// Databricks ...
	Databricks ReservedResourceType = "Databricks"
	// DataFactory ...
	DataFactory ReservedResourceType = "DataFactory"
	// DedicatedHost ...
	DedicatedHost ReservedResourceType = "DedicatedHost"
	// ManagedDisk ...
	ManagedDisk ReservedResourceType = "ManagedDisk"
	// MariaDb ...
	MariaDb ReservedResourceType = "MariaDb"
	// MySQL ...
	MySQL ReservedResourceType = "MySql"
	// NetAppStorage ...
	NetAppStorage ReservedResourceType = "NetAppStorage"
	// PostgreSQL ...
	PostgreSQL ReservedResourceType = "PostgreSql"
	// RedHat ...
	RedHat ReservedResourceType = "RedHat"
	// RedHatOsa ...
	RedHatOsa ReservedResourceType = "RedHatOsa"
	// RedisCache ...
	RedisCache ReservedResourceType = "RedisCache"
	// SapHana ...
	SapHana ReservedResourceType = "SapHana"
	// SQLAzureHybridBenefit ...
	SQLAzureHybridBenefit ReservedResourceType = "SqlAzureHybridBenefit"
	// SQLDatabases ...
	SQLDatabases ReservedResourceType = "SqlDatabases"
	// SQLDataWarehouse ...
	SQLDataWarehouse ReservedResourceType = "SqlDataWarehouse"
	// SQLEdge ...
	SQLEdge ReservedResourceType = "SqlEdge"
	// SuseLinux ...
	SuseLinux ReservedResourceType = "SuseLinux"
	// VirtualMachines ...
	VirtualMachines ReservedResourceType = "VirtualMachines"
	// VMwareCloudSimple ...
	VMwareCloudSimple ReservedResourceType = "VMwareCloudSimple"
)

// PossibleReservedResourceTypeValues returns an array of possible values for the ReservedResourceType const type.
func PossibleReservedResourceTypeValues() []ReservedResourceType {
	return []ReservedResourceType{AppService, AVS, AzureDataExplorer, AzureFiles, BlockBlob, CosmosDb, Databricks, DataFactory, DedicatedHost, ManagedDisk, MariaDb, MySQL, NetAppStorage, PostgreSQL, RedHat, RedHatOsa, RedisCache, SapHana, SQLAzureHybridBenefit, SQLDatabases, SQLDataWarehouse, SQLEdge, SuseLinux, VirtualMachines, VMwareCloudSimple}
}

// StatusCode enumerates the values for status code.
type StatusCode string

const (
	// StatusCodeActive ...
	StatusCodeActive StatusCode = "Active"
	// StatusCodeExpired ...
	StatusCodeExpired StatusCode = "Expired"
	// StatusCodeMerged ...
	StatusCodeMerged StatusCode = "Merged"
	// StatusCodeNone ...
	StatusCodeNone StatusCode = "None"
	// StatusCodePaymentInstrumentError ...
	StatusCodePaymentInstrumentError StatusCode = "PaymentInstrumentError"
	// StatusCodePending ...
	StatusCodePending StatusCode = "Pending"
	// StatusCodePurchaseError ...
	StatusCodePurchaseError StatusCode = "PurchaseError"
	// StatusCodeSplit ...
	StatusCodeSplit StatusCode = "Split"
	// StatusCodeSucceeded ...
	StatusCodeSucceeded StatusCode = "Succeeded"
)

// PossibleStatusCodeValues returns an array of possible values for the StatusCode const type.
func PossibleStatusCodeValues() []StatusCode {
	return []StatusCode{StatusCodeActive, StatusCodeExpired, StatusCodeMerged, StatusCodeNone, StatusCodePaymentInstrumentError, StatusCodePending, StatusCodePurchaseError, StatusCodeSplit, StatusCodeSucceeded}
}
